/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.module.xero;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.charset.Charset;
import java.util.Random;

import net.oauth.OAuthProblemException;

import org.mule.api.MuleEvent;
import org.mule.api.MuleException;
import org.mule.construct.Flow;
import org.mule.tck.FunctionalTestCase;
import org.mule.tck.AbstractMuleTestCase;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class XeroConnectorTest extends FunctionalTestCase
{
    public static String responseOK = "<Status>OK</Status>";
    public static String responseErrorTen = "<ErrorNumber>10</ErrorNumber>";
    public static String invoiceNumberAnchor = "#InvoiceNumber#";
	    
    XeroConnectorTestUtil testUtil = new XeroConnectorTestUtil();
    public String invoiceNumberString = testUtil.generateRandomString();
    
    @Override
    protected String getConfigResources()
    {
        return XeroConnectorTestUtil.getConfigResourceFile();
    }

    @Test
    public void testGetAccountsListSuccess() throws Exception
    {
    	MuleEvent responseEvent = testUtil.setupGenericGetObjectTest("testGetAccountsList");
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetBankTransactionsListSuccess() throws Exception
    {
    	MuleEvent responseEvent = testUtil.setupGenericGetObjectTest("testGetBankTransactionsList");
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetBrandingThemesListSuccess() throws Exception
    {
    	MuleEvent responseEvent = testUtil.setupGenericGetObjectTest("testGetBrandingThemesList");
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetContactsListSuccess() throws Exception
    {
    	MuleEvent responseEvent = testUtil.setupGenericGetObjectTest("testGetContactsList");
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetCreditNotesListSuccess() throws Exception
    {
    	MuleEvent responseEvent = testUtil.setupGenericGetObjectTest("testGetCreditNotesList");
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetEmployeesListSuccess() throws Exception
    {
    	MuleEvent responseEvent = testUtil.setupGenericGetObjectTest("testGetEmployeesList");
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetExpenseClaimsListSuccess() throws Exception
    {
    	MuleEvent responseEvent = testUtil.setupGenericGetObjectTest("testGetExpenseClaimsList");
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetInvoicesListSuccess() throws Exception
    {
    	MuleEvent responseEvent = testUtil.setupGenericGetObjectTest("testGetInvoicesList");
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetItemsSuccess() throws Exception
    {
    	MuleEvent responseEvent = testUtil.setupGenericGetObjectTest("testGetItemsList");
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetJournalsSuccess() throws Exception
    {
    	MuleEvent responseEvent = testUtil.setupGenericGetObjectTest("testGetJournalsList");
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetManualJournalsSuccess() throws Exception
    {
    	MuleEvent responseEvent = testUtil.setupGenericGetObjectTest("testGetManualJournalsList");
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetPaymentsListSuccess() throws Exception
    {
    	MuleEvent responseEvent = testUtil.setupGenericGetObjectTest("testGetPaymentsList");
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetReceiptsListSuccess() throws Exception
    {
    	MuleEvent responseEvent = testUtil.setupGenericGetObjectTest("testGetReceiptsList");
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetTrackingCategoriesListSuccess() throws Exception
    {
    	MuleEvent responseEvent = testUtil.setupGenericGetObjectTest("testGetTrackingCategoriesList");
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetUsersListSuccess() throws Exception
    {
    	MuleEvent responseEvent = testUtil.setupGenericGetObjectTest("testGetUsersList");
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
//    
//    @Test
//    public void testGetAccountSuccess() throws Exception
//    {
//    	MuleEvent responseEvent = testUtil.setupGenericGetObjectByIdTest("testGetAccount");
//        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
//    }
    
    @Test(expected=MuleException.class)
    public void testGetInvoiceInvalidId() 
    {
        try {
        	@SuppressWarnings("unused")
			MuleEvent responseEvent = testUtil.setupGenericGetObjectTest("testGetInvoiceInvalidId");
		} catch (Exception e) {
			e.printStackTrace();
		}
    }
    
    @Test
    public void testCreateInvoiceSuccess() throws Exception
    {
    	String payload = testUtil.readFile("src/test/resources/create_invoice_success.xml");
    	MuleEvent responseEvent = testUtil.setupGenericCreateObjectTest("testCreateInvoiceSuccess", payload);        
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testCreateInvoiceWithInvoiceNumberSuccess() throws Exception
    {
    	String payload = testUtil.readFile("src/test/resources/create_invoice_success_with_invoice_number.xml");
    	payload = payload.replace(invoiceNumberAnchor, invoiceNumberString);
    	MuleEvent responseEvent = testUtil.setupGenericCreateObjectTest("testCreateInvoiceWithInvoiceNumberSuccess", payload);        
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetInvoiceSuccess() throws Exception
    {
    	MuleEvent responseEvent = testUtil.setupGenericGetObjectByIdTest("testGetInvoice", invoiceNumberString);
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testCreateInvoiceFailure() throws Exception
    {
    	String payload = testUtil.readFile("src/test/resources/create_invoice_failure.xml");
    	MuleEvent responseEvent = testUtil.setupGenericCreateObjectTest("testCreateInvoiceFailure", payload);       
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseErrorTen));
    }
    
    @Test
    public void testUpdateInvoiceSuccess() throws Exception
    {
    	String payload = testUtil.readFile("src/test/resources/update_invoice_success.xml");
    	MuleEvent responseEvent = testUtil.setupGenericUpdateObjectTest("testUpdateInvoiceSuccess", payload);        
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
}
