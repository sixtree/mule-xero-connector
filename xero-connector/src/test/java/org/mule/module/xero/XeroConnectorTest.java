/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.module.xero;

import org.mule.api.MuleEvent;
import org.mule.construct.Flow;
import org.mule.tck.FunctionalTestCase;
import org.mule.tck.AbstractMuleTestCase;

import org.junit.Test;

public class XeroConnectorTest extends FunctionalTestCase
{
    public static String responseOK = "<Status>OK</Status>";
	
	@Override
    protected String getConfigResources()
    {
        return "xero-connector-config.xml";
    }

    @Test
    public void testGetAllAccountsSuccess() throws Exception
    {
    	Flow flow = lookupFlowConstruct("testGetAllAccounts");
        MuleEvent event = getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);
        System.out.print(responseEvent.getMessage().getPayload().toString()); //TODO - remove this line        
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetAllInvoicesSuccess() throws Exception
    {
    	Flow flow = lookupFlowConstruct("testGetAllInvoices");
        MuleEvent event = getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);
        System.out.print(responseEvent.getMessage().getPayload().toString()); //TODO - remove this line        
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetAccountSuccess() throws Exception
    {
    	Flow flow = lookupFlowConstruct("testGetAccount");
        MuleEvent event = getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);
        System.out.print(responseEvent.getMessage().getPayload().toString()); //TODO - remove this line        
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetInvoiceSuccess() throws Exception
    {
    	Flow flow = lookupFlowConstruct("testGetInvoice");
        MuleEvent event = getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);
        System.out.print(responseEvent.getMessage().getPayload().toString()); //TODO - remove this line        
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testCreateInvoiceSuccess() throws Exception
    {
    	Flow flow = lookupFlowConstruct("testCreateInvoice");
    	String payload = "<Invoice><Type>ACCREC</Type><Contact>    <Name>ABC Limited</Name>  </Contact>  <Date>2009-08-30</Date>  <DueDate>2009-09-20</DueDate>  <LineAmountTypes>Exclusive</LineAmountTypes>  <LineItems>    <LineItem>      <Description>Consulting services as agreed</Description>      <Quantity>5.0000</Quantity>      <UnitAmount>120.00</UnitAmount>      <AccountCode>200</AccountCode></LineItem>  </LineItems></Invoice>";
    	//TODO - look this xml request up from a file
    	MuleEvent event = getTestEvent(payload);    	
        MuleEvent responseEvent = flow.process(event);
        System.out.print(responseEvent.getMessage().getPayload().toString()); //TODO - remove this line        
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    /**
    * Run the flow specified by name and assert equality on the expected output
    *
    * @param flowName The name of the flow to run
    * @param expect The expected output
    */
    protected <T> void runFlowAndExpect(String flowName, T expect) throws Exception
    {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = AbstractMuleTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        assertEquals(expect, responseEvent.getMessage().getPayload());
    }

    /**
    * Run the flow specified by name using the specified payload and assert
    * equality on the expected output
    *
    * @param flowName The name of the flow to run
    * @param expect The expected output
    * @param payload The payload of the input event
    */
    protected <T, U> void runFlowWithPayloadAndExpect(String flowName, T expect, U payload) throws Exception
    {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = AbstractMuleTestCase.getTestEvent(payload);
        MuleEvent responseEvent = flow.process(event);

        assertEquals(expect, responseEvent.getMessage().getPayload());
    }

    /**
     * Retrieve a flow by name from the registry
     *
     * @param name Name of the flow to retrieve
     */
    protected Flow lookupFlowConstruct(String name)
    {
        return (Flow) AbstractMuleTestCase.muleContext.getRegistry().lookupFlowConstruct(name);
    }
}
