/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.module.xero;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.charset.Charset;
import java.util.Random;

import net.oauth.OAuthProblemException;

import org.mule.api.MuleEvent;
import org.mule.api.MuleException;
import org.mule.construct.Flow;
import org.mule.tck.FunctionalTestCase;
import org.mule.tck.AbstractMuleTestCase;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class XeroConnectorTest extends FunctionalTestCase
{
    public static String responseOK = "<Status>OK</Status>";
	
	@Override
    protected String getConfigResources()
    {
        return "xero-connector-config.xml";
    }

    @Test
    public void testGetAccountsListSuccess() throws Exception
    {
    	MuleEvent responseEvent = setupGenericGetObjectTest("testGetAccountsList");
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetInvoicesListSuccess() throws Exception
    {
    	MuleEvent responseEvent = setupGenericGetObjectTest("testGetInvoicesList");
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetBankTransactionsListSuccess() throws Exception
    {
    	MuleEvent responseEvent = setupGenericGetObjectTest("testGetBankTransactionsList");
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetBrandingThemesListSuccess() throws Exception
    {
    	MuleEvent responseEvent = setupGenericGetObjectTest("testGetBrandingThemesList");
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetAccountSuccess() throws Exception
    {
    	MuleEvent responseEvent = setupGenericGetObjectTest("testGetAccount");
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testGetInvoiceSuccess() throws Exception
    {
    	MuleEvent responseEvent = setupGenericGetObjectTest("testGetInvoice");
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test(expected=MuleException.class)
    public void testGetInvoiceInvalidId() 
    {
        try {
        	@SuppressWarnings("unused")
			MuleEvent responseEvent = setupGenericGetObjectTest("testGetInvoiceInvalidId");
		} catch (MuleException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    @Test
    public void testCreateInvoiceSuccess() throws Exception
    {
    	String payload = readFile("src/test/resources/create_invoice_success.xml");
    	MuleEvent responseEvent = setupGenericCreateObjectTest("testCreateInvoiceSuccess", payload);        
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testCreateInvoiceWithInvoiceNumberSuccess() throws Exception
    {
    	String invoiceNumberAnchor = "#InvoiceNumber#";

    	//Generate random number to ensure InvoiceNumber is unique
    	String invoiceNumberString = generateRandomString();
    	
    	String payload = readFile("src/test/resources/create_invoice_success_with_invoice_number.xml");
    	payload = payload.replace(invoiceNumberAnchor, invoiceNumberString);
    	MuleEvent responseEvent = setupGenericCreateObjectTest("testCreateInvoiceWithInvoiceNumberSuccess", payload);        
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
    @Test
    public void testCreateInvoiceFailure() throws Exception
    {
    	String responseError = "<ErrorNumber>10</ErrorNumber>";
    	String payload = readFile("src/test/resources/create_invoice_failure.xml");
    	MuleEvent responseEvent = setupGenericCreateObjectTest("testCreateInvoiceFailure", payload);       
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseError));
    }
    
    @Test
    public void testUpdateInvoiceSuccess() throws Exception
    {
    	String payload = readFile("src/test/resources/update_invoice_success.xml");
    	MuleEvent responseEvent = setupGenericUpdateObjectTest("testUpdateInvoiceSuccess", payload);        
        assertTrue(responseEvent.getMessage().getPayload().toString().contains(responseOK));
    }
    
 
    /**
     * Retrieve a flow by name from the registry
     *
     * @param name Name of the flow to retrieve
     */
    protected Flow lookupFlowConstruct(String name)
    {
        return (Flow) AbstractMuleTestCase.muleContext.getRegistry().lookupFlowConstruct(name);
    }
    
    private MuleEvent setupGenericGetObjectTest(String testConstructName) throws Exception
    {
    	Flow flow = lookupFlowConstruct(testConstructName);
    	MuleEvent event = getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);
        System.out.print(responseEvent.getMessage().getPayload().toString()); //TODO - remove this line        
                
        return responseEvent;
    }
    
    private MuleEvent setupGenericCreateObjectTest(String testConstructName, String payload) throws Exception
    {
    	Flow flow = lookupFlowConstruct(testConstructName);
    	MuleEvent event = getTestEvent(payload);
        MuleEvent responseEvent = flow.process(event);
        System.out.print(responseEvent.getMessage().getPayload().toString()); //TODO - remove this line        
                
        return responseEvent;
    }
    
    private MuleEvent setupGenericUpdateObjectTest(String testConstructName, String payload) throws Exception
    {
    	Flow flow = lookupFlowConstruct(testConstructName);
    	MuleEvent event = getTestEvent(payload);
        MuleEvent responseEvent = flow.process(event);
        System.out.print(responseEvent.getMessage().getPayload().toString()); //TODO - remove this line        
                
        return responseEvent;
    }
    
    private static String readFile(String path) throws IOException {
    	FileInputStream stream = new FileInputStream(new File(path));
    	try {
    		FileChannel fc = stream.getChannel();
    		MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size());
    		/* Instead of using default, pass in a decoder. */
    		return Charset.defaultCharset().decode(bb).toString();
    	}
    	finally {
    		stream.close();
    	}
    }
    
    private String generateRandomString(){
    	long currentTime = System.currentTimeMillis();
    	Random randGenerator = new Random(currentTime);
    	int randomNumberInt = randGenerator.nextInt(99999999) + 10000000;
    	String randomNumberString = Integer.toString(randomNumberInt);
    	
    	return randomNumberString;
    }
}
